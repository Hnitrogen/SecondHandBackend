// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: api/stuff/v1/stuff.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stuff_CreateStuff_FullMethodName = "/api.stuff.v1.Stuff/CreateStuff"
	Stuff_UpdateStuff_FullMethodName = "/api.stuff.v1.Stuff/UpdateStuff"
	Stuff_DeleteStuff_FullMethodName = "/api.stuff.v1.Stuff/DeleteStuff"
	Stuff_GetStuff_FullMethodName    = "/api.stuff.v1.Stuff/GetStuff"
	Stuff_ListStuff_FullMethodName   = "/api.stuff.v1.Stuff/ListStuff"
)

// StuffClient is the client API for Stuff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StuffClient interface {
	CreateStuff(ctx context.Context, in *CreateStuffRequest, opts ...grpc.CallOption) (*CreateStuffReply, error)
	UpdateStuff(ctx context.Context, in *UpdateStuffRequest, opts ...grpc.CallOption) (*UpdateStuffReply, error)
	DeleteStuff(ctx context.Context, in *DeleteStuffRequest, opts ...grpc.CallOption) (*DeleteStuffReply, error)
	GetStuff(ctx context.Context, in *GetStuffRequest, opts ...grpc.CallOption) (*GetStuffReply, error)
	ListStuff(ctx context.Context, in *ListStuffRequest, opts ...grpc.CallOption) (*ListStuffReply, error)
}

type stuffClient struct {
	cc grpc.ClientConnInterface
}

func NewStuffClient(cc grpc.ClientConnInterface) StuffClient {
	return &stuffClient{cc}
}

func (c *stuffClient) CreateStuff(ctx context.Context, in *CreateStuffRequest, opts ...grpc.CallOption) (*CreateStuffReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStuffReply)
	err := c.cc.Invoke(ctx, Stuff_CreateStuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuffClient) UpdateStuff(ctx context.Context, in *UpdateStuffRequest, opts ...grpc.CallOption) (*UpdateStuffReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStuffReply)
	err := c.cc.Invoke(ctx, Stuff_UpdateStuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuffClient) DeleteStuff(ctx context.Context, in *DeleteStuffRequest, opts ...grpc.CallOption) (*DeleteStuffReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStuffReply)
	err := c.cc.Invoke(ctx, Stuff_DeleteStuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuffClient) GetStuff(ctx context.Context, in *GetStuffRequest, opts ...grpc.CallOption) (*GetStuffReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStuffReply)
	err := c.cc.Invoke(ctx, Stuff_GetStuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuffClient) ListStuff(ctx context.Context, in *ListStuffRequest, opts ...grpc.CallOption) (*ListStuffReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStuffReply)
	err := c.cc.Invoke(ctx, Stuff_ListStuff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StuffServer is the server API for Stuff service.
// All implementations must embed UnimplementedStuffServer
// for forward compatibility.
type StuffServer interface {
	CreateStuff(context.Context, *CreateStuffRequest) (*CreateStuffReply, error)
	UpdateStuff(context.Context, *UpdateStuffRequest) (*UpdateStuffReply, error)
	DeleteStuff(context.Context, *DeleteStuffRequest) (*DeleteStuffReply, error)
	GetStuff(context.Context, *GetStuffRequest) (*GetStuffReply, error)
	ListStuff(context.Context, *ListStuffRequest) (*ListStuffReply, error)
	mustEmbedUnimplementedStuffServer()
}

// UnimplementedStuffServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStuffServer struct{}

func (UnimplementedStuffServer) CreateStuff(context.Context, *CreateStuffRequest) (*CreateStuffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStuff not implemented")
}
func (UnimplementedStuffServer) UpdateStuff(context.Context, *UpdateStuffRequest) (*UpdateStuffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStuff not implemented")
}
func (UnimplementedStuffServer) DeleteStuff(context.Context, *DeleteStuffRequest) (*DeleteStuffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStuff not implemented")
}
func (UnimplementedStuffServer) GetStuff(context.Context, *GetStuffRequest) (*GetStuffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStuff not implemented")
}
func (UnimplementedStuffServer) ListStuff(context.Context, *ListStuffRequest) (*ListStuffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStuff not implemented")
}
func (UnimplementedStuffServer) mustEmbedUnimplementedStuffServer() {}
func (UnimplementedStuffServer) testEmbeddedByValue()               {}

// UnsafeStuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StuffServer will
// result in compilation errors.
type UnsafeStuffServer interface {
	mustEmbedUnimplementedStuffServer()
}

func RegisterStuffServer(s grpc.ServiceRegistrar, srv StuffServer) {
	// If the following call pancis, it indicates UnimplementedStuffServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stuff_ServiceDesc, srv)
}

func _Stuff_CreateStuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStuffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuffServer).CreateStuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuff_CreateStuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuffServer).CreateStuff(ctx, req.(*CreateStuffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuff_UpdateStuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStuffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuffServer).UpdateStuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuff_UpdateStuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuffServer).UpdateStuff(ctx, req.(*UpdateStuffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuff_DeleteStuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStuffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuffServer).DeleteStuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuff_DeleteStuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuffServer).DeleteStuff(ctx, req.(*DeleteStuffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuff_GetStuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStuffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuffServer).GetStuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuff_GetStuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuffServer).GetStuff(ctx, req.(*GetStuffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuff_ListStuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStuffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuffServer).ListStuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuff_ListStuff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuffServer).ListStuff(ctx, req.(*ListStuffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stuff_ServiceDesc is the grpc.ServiceDesc for Stuff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stuff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stuff.v1.Stuff",
	HandlerType: (*StuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStuff",
			Handler:    _Stuff_CreateStuff_Handler,
		},
		{
			MethodName: "UpdateStuff",
			Handler:    _Stuff_UpdateStuff_Handler,
		},
		{
			MethodName: "DeleteStuff",
			Handler:    _Stuff_DeleteStuff_Handler,
		},
		{
			MethodName: "GetStuff",
			Handler:    _Stuff_GetStuff_Handler,
		},
		{
			MethodName: "ListStuff",
			Handler:    _Stuff_ListStuff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stuff/v1/stuff.proto",
}
